# -*- coding: utf-8 -*-
"""mnist using ANN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MBDepq90EKft8-Ct3VkHe59BcUseL-Sv
"""

import tensorflow
from tensorflow import keras
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense,Flatten

(X_train,y_train),(X_test,y_test)=keras.datasets.mnist.load_data()

X_train.shape

X_train[0]

X_train[0].shape

X_test.shape

y_train

#To convert the pixel value to Ann
import matplotlib.pyplot as plt
plt.imshow(X_train[0])

plt.imshow(X_train[1])

plt.imshow(X_train[2])

plt.imshow(X_train[8])

#now we need to create an neural network architecture so that it can train the data and predict the digit on unseen data based on the pixel value.
#In order to train the model we need to keep the pixel values in the same range to get converged and to calculate the weights and biases of each pixel easily
X_train=X_train/255
X_test=X_test/255

X_train

#Now we are bulding the artificial neural network to our model
model=Sequential()
model.add(Flatten(input_shape=(28,28)))
model.add(Dense(128,activation='relu'))
model.add(Dense(32,activation='relu'))
model.add(Dense(10,activation='softmax'))

model.summary()

model.compile(loss='sparse_categorical_crossentropy',optimizer='Adam',metrics=['accuracy'])

history=model.fit(X_train,y_train,epochs=32,validation_split=0.2)

#this will give the probabillity of the images that can be present more in a data from zero to nine
y_prob=model.predict(X_test)

y_pred=y_prob.argmax(axis=1)

from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred)*100

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])

plt.plot(history.history['val_loss'])

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])

X_test

plt.imshow(X_test[0])

#the probability of the number in the each row
model.predict(X_test[0].reshape(1,28,28))

model.predict(X_test[0].reshape(1,28,28)).argmax(axis=1)

plt.imshow(X_test[1])

model.predict(X_test[1].reshape(1,28,28)).argmax(axis=1)